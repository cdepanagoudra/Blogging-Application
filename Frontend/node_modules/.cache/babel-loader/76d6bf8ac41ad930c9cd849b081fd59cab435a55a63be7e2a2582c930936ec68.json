{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\Workspace1\\\\Blog-App\\\\blog-app\\\\src\\\\components\\\\NewFeed.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { deletePostById, loadAllPosts } from \"../Services/post-service\";\n// import {\n//   Col,\n//   Container,\n//   Pagination,\n//   PaginationItem,\n//   PaginationLink,\n//   Row,\n// } from \"reactstrap\";\n// import { Post } from \"./Post\";\n// import { toast } from \"react-toastify\";\n// import InfiniteScroll from \"react-infinite-scroll-component\";\n\n// function NewFeed() {\n//   const [postContent, setPostContent] = useState({\n//     content: [],\n//     totalPages: \"\",\n//     totalElements: \"\",\n//     pageSize: \"\",\n//     lastPage: false,\n//     pageNumber: \"\",\n//   });\n//   console.log(postContent);\n//   const [currentPage, setCurrentPage] = useState(0);\n//   useEffect(() => {\n//     //load all posts\n//     changePage(currentPage);\n//   }, [currentPage]);\n//   function deletePost(post) {\n//     // going to delete post\n//     deletePostById(post.id)\n//       .then((res) => {\n//         console.log(res);\n//         toast.success(\"Post is Deleted\");\n//         //loadPostData();\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//         toast.error(\"error in deleting post\");\n//       });\n//   }\n//   const changePage = (pageNumber = 0, pageSize = 5) => {\n//     loadAllPosts(pageNumber, pageSize)\n//       .then((data) => {\n//         console.log(data);\n//         setPostContent({\n//           content: [...postContent.content, ...data.content],\n//           totalPages: data.totalPages,\n//           totalElements: data.totalElements,\n//           pageSize: data.pageSize,\n//           lastPage: data.lastPage,\n//           pageNumber: data.pageNumber,\n//         });\n\n//         // window.scroll(0,0);\n//       })\n//       .catch((error) => {\n//         toast.error(\"Error in loading Post\");\n//       });\n//   };\n//   const changePageInfinite = () => {\n//     console.log(\"Page changed\");\n//     setCurrentPage(currentPage + 1);\n//   };\n//   return (\n//     <div className=\"container-fluid\">\n//       <Row>\n//         <Col\n//           md={{\n//             size: 12,\n//           }}\n//         >\n//           <h1>Blogs Count ({postContent?.totalElements})</h1>\n\n//           <InfiniteScroll\n//             dataLength={postContent.content.length}\n//             next={changePageInfinite}\n//             hasMore={!postContent.lastPage}\n//             loader={<h4>Loading...</h4>}\n//             endMessage={\n//               <p style={{ textAlign: \"center\" }}>\n//                 <b>Yay! You have seen it all</b>\n//               </p>\n//             }\n//           >\n//             {postContent?.content.map((post) => (\n//               <Post deletePost={deletePost} post={post} key={post.id} />\n//             ))}\n//           </InfiniteScroll>\n\n//           {/* <Container className=\"mt-3\">\n//             <Pagination>\n//               <PaginationItem disabled={postContent.pageNumber===0} >\n//                 <PaginationLink previous onClick={() => changePage(postContent.pageNumber - 1)} >Previous</PaginationLink>\n\n//               </PaginationItem>\n//               {[...Array(postContent.totalPages)].map((item, index) => (\n//                 <PaginationItem onClick={()=>changePage(index)} active={index==postContent.pageNumber} key={index}>\n//                   <PaginationLink>{index + 1}</PaginationLink>\n//                 </PaginationItem>\n//               ))}\n\n//               <PaginationItem disabled={postContent.lastPage}>\n//                 <PaginationLink next onClick={() => changePage(postContent.pageNumber + 1)}>Next</PaginationLink>\n\n//               </PaginationItem>\n//             </Pagination>\n//           </Container> */}\n//         </Col>\n//       </Row>\n//     </div>\n//   );\n// }\n// export default NewFeed;\nimport React, { useEffect, useState } from \"react\";\nimport { deletePostById, loadAllPosts } from \"../Services/post-service\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { Post } from \"./Post\";\nimport { toast } from \"react-toastify\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewFeed() {\n  _s();\n  const [postContent, setPostContent] = useState({\n    content: [],\n    totalPages: \"\",\n    totalElements: \"\",\n    pageSize: \"\",\n    lastPage: false,\n    pageNumber: \"\"\n  });\n  const [currentPage, setCurrentPage] = useState(0);\n  useEffect(() => {\n    // load all posts\n    changePage(currentPage);\n  }, [currentPage]);\n  function deletePost(post) {\n    // going to delete post\n    deletePostById(post.id).then(() => {\n      toast.success(\"Post is Deleted\");\n\n      // Update the state to remove the deleted post\n      setPostContent(prevPostContent => ({\n        ...prevPostContent,\n        content: prevPostContent.content.filter(p => p.id !== post.id)\n      }));\n    }).catch(error => {\n      console.log(error);\n      toast.error(\"Error in deleting post\");\n    });\n  }\n  const changePage = (pageNumber = 0, pageSize = 5) => {\n    loadAllPosts(pageNumber, pageSize).then(data => {\n      setPostContent({\n        content: [...postContent.content, ...data.content],\n        totalPages: data.totalPages,\n        totalElements: data.totalElements,\n        pageSize: data.pageSize,\n        lastPage: data.lastPage,\n        pageNumber: data.pageNumber\n      });\n    }).catch(error => {\n      toast.error(\"Error in loading Post\");\n    });\n  };\n  const changePageInfinite = () => {\n    setCurrentPage(currentPage + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: {\n          size: 12\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Blogs Count (\", postContent === null || postContent === void 0 ? void 0 : postContent.totalElements, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n          dataLength: postContent.content.length,\n          next: changePageInfinite,\n          hasMore: !postContent.lastPage,\n          loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 21\n          }, this),\n          endMessage: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              textAlign: \"center\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Yay! You have seen it all\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this),\n          children: postContent === null || postContent === void 0 ? void 0 : postContent.content.map(post => /*#__PURE__*/_jsxDEV(Post, {\n            deletePost: deletePost,\n            post: post\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n}\n_s(NewFeed, \"84PseU9DPMxvHuaeCAhF7FxZLf4=\");\n_c = NewFeed;\nexport default NewFeed;\nvar _c;\n$RefreshReg$(_c, \"NewFeed\");","map":{"version":3,"names":["React","useEffect","useState","deletePostById","loadAllPosts","Col","Container","Row","Post","toast","InfiniteScroll","jsxDEV","_jsxDEV","NewFeed","_s","postContent","setPostContent","content","totalPages","totalElements","pageSize","lastPage","pageNumber","currentPage","setCurrentPage","changePage","deletePost","post","id","then","success","prevPostContent","filter","p","catch","error","console","log","data","changePageInfinite","className","children","md","size","fileName","_jsxFileName","lineNumber","columnNumber","dataLength","length","next","hasMore","loader","endMessage","style","textAlign","map","_c","$RefreshReg$"],"sources":["D:/React/Workspace1/Blog-App/blog-app/src/components/NewFeed.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { deletePostById, loadAllPosts } from \"../Services/post-service\";\r\n// import {\r\n//   Col,\r\n//   Container,\r\n//   Pagination,\r\n//   PaginationItem,\r\n//   PaginationLink,\r\n//   Row,\r\n// } from \"reactstrap\";\r\n// import { Post } from \"./Post\";\r\n// import { toast } from \"react-toastify\";\r\n// import InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\n// function NewFeed() {\r\n//   const [postContent, setPostContent] = useState({\r\n//     content: [],\r\n//     totalPages: \"\",\r\n//     totalElements: \"\",\r\n//     pageSize: \"\",\r\n//     lastPage: false,\r\n//     pageNumber: \"\",\r\n//   });\r\n//   console.log(postContent);\r\n//   const [currentPage, setCurrentPage] = useState(0);\r\n//   useEffect(() => {\r\n//     //load all posts\r\n//     changePage(currentPage);\r\n//   }, [currentPage]);\r\n//   function deletePost(post) {\r\n//     // going to delete post\r\n//     deletePostById(post.id)\r\n//       .then((res) => {\r\n//         console.log(res);\r\n//         toast.success(\"Post is Deleted\");\r\n//         //loadPostData();\r\n//       })\r\n//       .catch((error) => {\r\n//         console.log(error);\r\n//         toast.error(\"error in deleting post\");\r\n//       });\r\n//   }\r\n//   const changePage = (pageNumber = 0, pageSize = 5) => {\r\n//     loadAllPosts(pageNumber, pageSize)\r\n//       .then((data) => {\r\n//         console.log(data);\r\n//         setPostContent({\r\n//           content: [...postContent.content, ...data.content],\r\n//           totalPages: data.totalPages,\r\n//           totalElements: data.totalElements,\r\n//           pageSize: data.pageSize,\r\n//           lastPage: data.lastPage,\r\n//           pageNumber: data.pageNumber,\r\n//         });\r\n\r\n//         // window.scroll(0,0);\r\n//       })\r\n//       .catch((error) => {\r\n//         toast.error(\"Error in loading Post\");\r\n//       });\r\n//   };\r\n//   const changePageInfinite = () => {\r\n//     console.log(\"Page changed\");\r\n//     setCurrentPage(currentPage + 1);\r\n//   };\r\n//   return (\r\n//     <div className=\"container-fluid\">\r\n//       <Row>\r\n//         <Col\r\n//           md={{\r\n//             size: 12,\r\n//           }}\r\n//         >\r\n//           <h1>Blogs Count ({postContent?.totalElements})</h1>\r\n\r\n//           <InfiniteScroll\r\n//             dataLength={postContent.content.length}\r\n//             next={changePageInfinite}\r\n//             hasMore={!postContent.lastPage}\r\n//             loader={<h4>Loading...</h4>}\r\n//             endMessage={\r\n//               <p style={{ textAlign: \"center\" }}>\r\n//                 <b>Yay! You have seen it all</b>\r\n//               </p>\r\n//             }\r\n//           >\r\n//             {postContent?.content.map((post) => (\r\n//               <Post deletePost={deletePost} post={post} key={post.id} />\r\n//             ))}\r\n//           </InfiniteScroll>\r\n\r\n//           {/* <Container className=\"mt-3\">\r\n//             <Pagination>\r\n//               <PaginationItem disabled={postContent.pageNumber===0} >\r\n//                 <PaginationLink previous onClick={() => changePage(postContent.pageNumber - 1)} >Previous</PaginationLink>\r\n                \r\n//               </PaginationItem>\r\n//               {[...Array(postContent.totalPages)].map((item, index) => (\r\n//                 <PaginationItem onClick={()=>changePage(index)} active={index==postContent.pageNumber} key={index}>\r\n//                   <PaginationLink>{index + 1}</PaginationLink>\r\n//                 </PaginationItem>\r\n//               ))}\r\n\r\n//               <PaginationItem disabled={postContent.lastPage}>\r\n//                 <PaginationLink next onClick={() => changePage(postContent.pageNumber + 1)}>Next</PaginationLink>\r\n                \r\n//               </PaginationItem>\r\n//             </Pagination>\r\n//           </Container> */}\r\n//         </Col>\r\n//       </Row>\r\n//     </div>\r\n//   );\r\n// }\r\n// export default NewFeed;\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { deletePostById, loadAllPosts } from \"../Services/post-service\";\r\nimport {\r\n  Col,\r\n  Container,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport { Post } from \"./Post\";\r\nimport { toast } from \"react-toastify\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nfunction NewFeed() {\r\n  const [postContent, setPostContent] = useState({\r\n    content: [],\r\n    totalPages: \"\",\r\n    totalElements: \"\",\r\n    pageSize: \"\",\r\n    lastPage: false,\r\n    pageNumber: \"\",\r\n  });\r\n\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // load all posts\r\n    changePage(currentPage);\r\n  }, [currentPage]);\r\n\r\n  function deletePost(post) {\r\n    // going to delete post\r\n    deletePostById(post.id)\r\n      .then(() => {\r\n        toast.success(\"Post is Deleted\");\r\n\r\n        // Update the state to remove the deleted post\r\n        setPostContent((prevPostContent) => ({\r\n          ...prevPostContent,\r\n          content: prevPostContent.content.filter((p) => p.id !== post.id),\r\n        }));\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast.error(\"Error in deleting post\");\r\n      });\r\n  }\r\n\r\n  const changePage = (pageNumber = 0, pageSize = 5) => {\r\n    loadAllPosts(pageNumber, pageSize)\r\n      .then((data) => {\r\n        setPostContent({\r\n          content: [...postContent.content, ...data.content],\r\n          totalPages: data.totalPages,\r\n          totalElements: data.totalElements,\r\n          pageSize: data.pageSize,\r\n          lastPage: data.lastPage,\r\n          pageNumber: data.pageNumber,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        toast.error(\"Error in loading Post\");\r\n      });\r\n  };\r\n\r\n  const changePageInfinite = () => {\r\n    setCurrentPage(currentPage + 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <Row>\r\n        <Col md={{ size: 12 }}>\r\n          <h1>Blogs Count ({postContent?.totalElements})</h1>\r\n\r\n          <InfiniteScroll\r\n            dataLength={postContent.content.length}\r\n            next={changePageInfinite}\r\n            hasMore={!postContent.lastPage}\r\n            loader={<h4>Loading...</h4>}\r\n            endMessage={\r\n              <p style={{ textAlign: \"center\" }}>\r\n                <b>Yay! You have seen it all</b>\r\n              </p>\r\n            }\r\n          >\r\n            {postContent?.content.map((post) => (\r\n              <Post deletePost={deletePost} post={post} key={post.id} />\r\n            ))}\r\n          </InfiniteScroll>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewFeed;\r\n"],"mappingslD,SAASC,cAAc,EAAEC,YAAY,QAAQ,0BAA0B;AACvE,SACEC,GAAG,EACHC,SAAS,EACTC,GAAG,QACE,YAAY;AACnB,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,cAAc,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC;IAC7Ce,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE,EAAE;IACdC,aAAa,EAAE,EAAE;IACjBC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,KAAK;IACfC,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACd;IACAwB,UAAU,CAACF,WAAW,CAAC;EACzB,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,SAASG,UAAUA,CAACC,IAAI,EAAE;IACxB;IACAxB,cAAc,CAACwB,IAAI,CAACC,EAAE,CAAC,CACpBC,IAAI,CAAC,MAAM;MACVpB,KAAK,CAACqB,OAAO,CAAC,iBAAiB,CAAC;;MAEhC;MACAd,cAAc,CAAEe,eAAe,KAAM;QACnC,GAAGA,eAAe;QAClBd,OAAO,EAAEc,eAAe,CAACd,OAAO,CAACe,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACL,EAAE,KAAKD,IAAI,CAACC,EAAE;MACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CACDM,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB1B,KAAK,CAAC0B,KAAK,CAAC,wBAAwB,CAAC;IACvC,CAAC,CAAC;EACN;EAEA,MAAMV,UAAU,GAAGA,CAACH,UAAU,GAAG,CAAC,EAAEF,QAAQ,GAAG,CAAC,KAAK;IACnDhB,YAAY,CAACkB,UAAU,EAAEF,QAAQ,CAAC,CAC/BS,IAAI,CAAES,IAAI,IAAK;MACdtB,cAAc,CAAC;QACbC,OAAO,EAAE,CAAC,GAAGF,WAAW,CAACE,OAAO,EAAE,GAAGqB,IAAI,CAACrB,OAAO,CAAC;QAClDC,UAAU,EAAEoB,IAAI,CAACpB,UAAU;QAC3BC,aAAa,EAAEmB,IAAI,CAACnB,aAAa;QACjCC,QAAQ,EAAEkB,IAAI,CAAClB,QAAQ;QACvBC,QAAQ,EAAEiB,IAAI,CAACjB,QAAQ;QACvBC,UAAU,EAAEgB,IAAI,CAAChB;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAK;MAChB1B,KAAK,CAAC0B,KAAK,CAAC,uBAAuB,CAAC;IACtC,CAAC,CAAC;EACN,CAAC;EAED,MAAMI,kBAAkB,GAAGA,CAAA,KAAM;IAC/Bf,cAAc,CAACD,WAAW,GAAG,CAAC,CAAC;EACjC,CAAC;EAED,oBACEX,OAAA;IAAK4B,SAAS,EAAC,iBAAiB;IAAAC,QAAA,eAC9B7B,OAAA,CAACL,GAAG;MAAAkC,QAAA,eACF7B,OAAA,CAACP,GAAG;QAACqC,EAAE,EAAE;UAAEC,IAAI,EAAE;QAAG,CAAE;QAAAF,QAAA,gBACpB7B,OAAA;UAAA6B,QAAA,GAAI,eAAa,EAAC1B,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEI,aAAa,EAAC,GAAC;QAAA;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAEnDnC,OAAA,CAACF,cAAc;UACbsC,UAAU,EAAEjC,WAAW,CAACE,OAAO,CAACgC,MAAO;UACvCC,IAAI,EAAEX,kBAAmB;UACzBY,OAAO,EAAE,CAACpC,WAAW,CAACM,QAAS;UAC/B+B,MAAM,eAAExC,OAAA;YAAA6B,QAAA,EAAI;UAAU;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAE;UAC5BM,UAAU,eACRzC,OAAA;YAAG0C,KAAK,EAAE;cAAEC,SAAS,EAAE;YAAS,CAAE;YAAAd,QAAA,eAChC7B,OAAA;cAAA6B,QAAA,EAAG;YAAyB;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CACJ;UAAAN,QAAA,EAEA1B,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEE,OAAO,CAACuC,GAAG,CAAE7B,IAAI,iBAC7Bf,OAAA,CAACJ,IAAI;YAACkB,UAAU,EAAEA,UAAW;YAACC,IAAI,EAAEA;UAAK,GAAMA,IAAI,CAACC,EAAE;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAC1D;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACY,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACd;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACjC,EAAA,CAjFQD,OAAO;AAAA4C,EAAA,GAAP5C,OAAO;AAmFhB,eAAeA,OAAO;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}