{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { deletePostById, loadAllPosts } from \"../Services/post-service\";\n// import {\n//   Col,\n//   Container,\n//   Pagination,\n//   PaginationItem,\n//   PaginationLink,\n//   Row,\n// } from \"reactstrap\";\n// import { Post } from \"./Post\";\n// import { toast } from \"react-toastify\";\n// import InfiniteScroll from \"react-infinite-scroll-component\";\n\n// function NewFeed() {\n\n//   const [postContent, setPostContent] = useState({\n//     content: [],\n//     totalPages: \"\",\n//     totalElements: \"\",\n//     pageSize: \"\",\n//     lastPage: false,\n//     pageNumber: \"\",\n//   });\n//   //console.log(postContent);\n//   const [currentPage, setCurrentPage] = useState(0);\n//   useEffect(() => {\n//     //load all posts\n//     changePage(currentPage);\n//   }, [currentPage]);\n//   function deletePost(post) {\n//     // going to delete post\n//     deletePostById(post.id)\n//       .then((res) => {\n//         //console.log(res);\n//         toast.success(\"Post is Deleted\");\n\n//         //loadPostData();\n//       })\n//       .catch((error) => {\n//         //console.log(error);\n//         toast.error(\"error in deleting post\");\n//       });\n//   }\n//   const changePage = (pageNumber = 0, pageSize = 5) => {\n//     loadAllPosts(pageNumber, pageSize)\n//       .then((data) => {\n//         //console.log(data);\n//         setPostContent({\n//           content: [...postContent.content, ...data.content],\n//           totalPages: data.totalPages,\n//           totalElements: data.totalElements,\n//           pageSize: data.pageSize,\n//           lastPage: data.lastPage,\n//           pageNumber: data.pageNumber,\n//         });\n\n//         // window.scroll(0,0);\n//       })\n//       .catch((error) => {\n//         toast.error(\"Error in loading Post\");\n//       });\n//   };\n//   const changePageInfinite = () => {\n//     //console.log(\"Page changed\");\n//     setCurrentPage(currentPage + 1);\n//   };\n//   return (\n//     <div className=\"container-fluid\">\n//       <Row>\n//         <Col\n//           md={{\n//             size: 12,\n//           }}\n//         >\n//           <h1>Blogs Count ({postContent?.totalElements})</h1>\n\n//           <InfiniteScroll\n//             dataLength={postContent.content.length}\n//             next={changePageInfinite}\n//             hasMore={!postContent.lastPage}\n//             loader={<h4>Loading...</h4>}\n//             endMessage={\n//               <p style={{ textAlign: \"center\" }}>\n//                 <b>Yay! You have seen it all</b>\n//               </p>\n//             }\n//           >\n//             {postContent?.content.map((post) => (\n//               <Post deletePost={deletePost} post={post} key={post.id} />\n//             ))}\n//           </InfiniteScroll>\n\n//           {/* <Container className=\"mt-3\">\n//             <Pagination>\n//               <PaginationItem disabled={postContent.pageNumber===0} >\n//                 <PaginationLink previous onClick={() => changePage(postContent.pageNumber - 1)} >Previous</PaginationLink>\n\n//               </PaginationItem>\n//               {[...Array(postContent.totalPages)].map((item, index) => (\n//                 <PaginationItem onClick={()=>changePage(index)} active={index==postContent.pageNumber} key={index}>\n//                   <PaginationLink>{index + 1}</PaginationLink>\n//                 </PaginationItem>\n//               ))}\n\n//               <PaginationItem disabled={postContent.lastPage}>\n//                 <PaginationLink next onClick={() => changePage(postContent.pageNumber + 1)}>Next</PaginationLink>\n\n//               </PaginationItem>\n//             </Pagination>\n//           </Container> */}\n//         </Col>\n//       </Row>\n//     </div>\n//   );\n// }\n// export default NewFeed;","map":{"version":3,"names":[],"sources":["D:/React/Workspace1/Blog-App/blog-app/src/components/NewFeed.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { deletePostById, loadAllPosts } from \"../Services/post-service\";\r\n// import {\r\n//   Col,\r\n//   Container,\r\n//   Pagination,\r\n//   PaginationItem,\r\n//   PaginationLink,\r\n//   Row,\r\n// } from \"reactstrap\";\r\n// import { Post } from \"./Post\";\r\n// import { toast } from \"react-toastify\";\r\n// import InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\n// function NewFeed() {\r\n  \r\n//   const [postContent, setPostContent] = useState({\r\n//     content: [],\r\n//     totalPages: \"\",\r\n//     totalElements: \"\",\r\n//     pageSize: \"\",\r\n//     lastPage: false,\r\n//     pageNumber: \"\",\r\n//   });\r\n//   //console.log(postContent);\r\n//   const [currentPage, setCurrentPage] = useState(0);\r\n//   useEffect(() => {\r\n//     //load all posts\r\n//     changePage(currentPage);\r\n//   }, [currentPage]);\r\n//   function deletePost(post) {\r\n//     // going to delete post\r\n//     deletePostById(post.id)\r\n//       .then((res) => {\r\n//         //console.log(res);\r\n//         toast.success(\"Post is Deleted\");\r\n        \r\n        \r\n//         //loadPostData();\r\n//       })\r\n//       .catch((error) => {\r\n//         //console.log(error);\r\n//         toast.error(\"error in deleting post\");\r\n//       });\r\n//   }\r\n//   const changePage = (pageNumber = 0, pageSize = 5) => {\r\n//     loadAllPosts(pageNumber, pageSize)\r\n//       .then((data) => {\r\n//         //console.log(data);\r\n//         setPostContent({\r\n//           content: [...postContent.content, ...data.content],\r\n//           totalPages: data.totalPages,\r\n//           totalElements: data.totalElements,\r\n//           pageSize: data.pageSize,\r\n//           lastPage: data.lastPage,\r\n//           pageNumber: data.pageNumber,\r\n//         });\r\n\r\n//         // window.scroll(0,0);\r\n//       })\r\n//       .catch((error) => {\r\n//         toast.error(\"Error in loading Post\");\r\n//       });\r\n//   };\r\n//   const changePageInfinite = () => {\r\n//     //console.log(\"Page changed\");\r\n//     setCurrentPage(currentPage + 1);\r\n//   };\r\n//   return (\r\n//     <div className=\"container-fluid\">\r\n//       <Row>\r\n//         <Col\r\n//           md={{\r\n//             size: 12,\r\n//           }}\r\n//         >\r\n//           <h1>Blogs Count ({postContent?.totalElements})</h1>\r\n\r\n//           <InfiniteScroll\r\n//             dataLength={postContent.content.length}\r\n//             next={changePageInfinite}\r\n//             hasMore={!postContent.lastPage}\r\n//             loader={<h4>Loading...</h4>}\r\n//             endMessage={\r\n//               <p style={{ textAlign: \"center\" }}>\r\n//                 <b>Yay! You have seen it all</b>\r\n//               </p>\r\n//             }\r\n//           >\r\n//             {postContent?.content.map((post) => (\r\n//               <Post deletePost={deletePost} post={post} key={post.id} />\r\n//             ))}\r\n//           </InfiniteScroll>\r\n\r\n//           {/* <Container className=\"mt-3\">\r\n//             <Pagination>\r\n//               <PaginationItem disabled={postContent.pageNumber===0} >\r\n//                 <PaginationLink previous onClick={() => changePage(postContent.pageNumber - 1)} >Previous</PaginationLink>\r\n                \r\n//               </PaginationItem>\r\n//               {[...Array(postContent.totalPages)].map((item, index) => (\r\n//                 <PaginationItem onClick={()=>changePage(index)} active={index==postContent.pageNumber} key={index}>\r\n//                   <PaginationLink>{index + 1}</PaginationLink>\r\n//                 </PaginationItem>\r\n//               ))}\r\n\r\n//               <PaginationItem disabled={postContent.lastPage}>\r\n//                 <PaginationLink next onClick={() => changePage(postContent.pageNumber + 1)}>Next</PaginationLink>\r\n                \r\n//               </PaginationItem>\r\n//             </Pagination>\r\n//           </Container> */}\r\n//         </Col>\r\n//       </Row>\r\n//     </div>\r\n//   );\r\n// }\r\n// export default NewFeed;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}